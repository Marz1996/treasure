module assert_inputs(input clk, reset_n, logic[15:0] frame_n, valid_n, din);
parameter port_no = 0;

//Task 5 Steps 2,3 - Create a named property that checks the input protocol for the pad phase
//ToDo


//Task 6 Step 1 - Assert the property that checks the input protocol for the pad phase
//ToDo

//Task 6 Step 2 - Add else clause to assertion
//ToDo

endmodule //assert_inputs

module assert_outputs(input clk, reset_n, logic[15:0] frameo_n, valido_n, dout);
parameter port_no = 0;

int unsigned bit_cntr;

//Task 9 Steps 3,4 - create a general error message handler that prints the error message 
//along with simulation time and port of failure
//ToDo

dout_unknown_check: assert property (@(posedge clk) !valido_n[port_no] |-> (!$isunknown(dout[port_no])));

always@(posedge clk or negedge reset_n) begin: bit_counter
  if (!reset_n) bit_cntr = 0;
  else if (!valido_n[port_no]) bit_cntr++;
end : bit_counter

//Task 10 Steps 1,2 - Create a Named Sequence called s_frame to detect the period in which
//the signal frameo_n stays low.
//ToDo

//Task 11 Steps 1,2,3 - Create a Named Property p_vld_lo_on_rsng_frm to use the 
//Named Sequence s_frame to detect the end of a packet coming out of DUT
//ToDo

//Task 12 Steps 1,2,3 - Write a concurrent assertion using the Named Property created earlier
//ToDo

endmodule //assert_outputs
